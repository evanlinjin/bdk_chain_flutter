// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.76.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class BdkChainFlutterImpl implements BdkChainFlutter {
  final BdkChainFlutterPlatform _platform;
  factory BdkChainFlutterImpl(ExternalLibrary dylib) => BdkChainFlutterImpl.raw(BdkChainFlutterPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory BdkChainFlutterImpl.wasm(FutureOr<WasmModule> module) => BdkChainFlutterImpl(module as ExternalLibrary);
  BdkChainFlutterImpl.raw(this._platform);
  Future<Counter> newCounter({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_counter(port_),
      parseSuccessData: _wire2api_Counter,
      constMeta: kNewCounterConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewCounterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_counter",
        argNames: [],
      );

  Future<int> incrementCounter({required Counter counter, dynamic hint}) {
    var arg0 = _platform.api2wire_Counter(counter);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_increment_counter(port_, arg0),
      parseSuccessData: _wire2api_usize,
      constMeta: kIncrementCounterConstMeta,
      argValues: [counter],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIncrementCounterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "increment_counter",
        argNames: ["counter"],
      );

  DropFnType get dropOpaqueCounter => _platform.inner.drop_opaque_Counter;
  ShareFnType get shareOpaqueCounter => _platform.inner.share_opaque_Counter;
  OpaqueTypeFinalizer get CounterFinalizer => _platform.CounterFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  Counter _wire2api_Counter(dynamic raw) {
    return Counter.fromRaw(raw[0], raw[1], this);
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

// Section: finalizer

class BdkChainFlutterPlatform extends FlutterRustBridgeBase<BdkChainFlutterWire> {
  BdkChainFlutterPlatform(ffi.DynamicLibrary dylib) : super(BdkChainFlutterWire(dylib));

// Section: api2wire

  @protected
  wire_Counter api2wire_Counter(Counter raw) {
    final ptr = inner.new_Counter();
    _api_fill_to_wire_Counter(raw, ptr);
    return ptr;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _CounterFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_CounterPtr);
  OpaqueTypeFinalizer get CounterFinalizer => _CounterFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_Counter(Counter apiObj, wire_Counter wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BdkChainFlutterWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BdkChainFlutterWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BdkChainFlutterWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_new_counter(
    int port_,
  ) {
    return _wire_new_counter(
      port_,
    );
  }

  late final _wire_new_counterPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_new_counter');
  late final _wire_new_counter = _wire_new_counterPtr.asFunction<void Function(int)>();

  void wire_increment_counter(
    int port_,
    wire_Counter counter,
  ) {
    return _wire_increment_counter(
      port_,
      counter,
    );
  }

  late final _wire_increment_counterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Counter)>>('wire_increment_counter');
  late final _wire_increment_counter = _wire_increment_counterPtr.asFunction<void Function(int, wire_Counter)>();

  wire_Counter new_Counter() {
    return _new_Counter();
  }

  late final _new_CounterPtr = _lookup<ffi.NativeFunction<wire_Counter Function()>>('new_Counter');
  late final _new_Counter = _new_CounterPtr.asFunction<wire_Counter Function()>();

  void drop_opaque_Counter(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Counter(
      ptr,
    );
  }

  late final _drop_opaque_CounterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_Counter');
  late final _drop_opaque_Counter = _drop_opaque_CounterPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Counter(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Counter(
      ptr,
    );
  }

  late final _share_opaque_CounterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_Counter');
  late final _share_opaque_Counter =
      _share_opaque_CounterPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_Counter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
